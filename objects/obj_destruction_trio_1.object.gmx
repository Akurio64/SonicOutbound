<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_destruction_trio</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_badnik_grounded</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables.

 // Get common variables from parent:
    event_inherited();
 
 // Set horizontal speed.
    x_speed = -1;
    
 // Animation:
    sprite           = sprite_index;
    variant          = 1
    sprite_direction = -1;
 
 // Turn variables.
    turn_timer = -1;
    
 //Variant variables
    roll_angle=0
    r_time=0
    d_time=0
    ball_angle=0
    b_time=0
    dr=0
    alarm[0]=1
    drill_y=0
    ro=false
    bo=false
    hurt=""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
instance_destroy(hurt)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurt = instance_create(x,y,obj_hurt)
hurt.sprite_index = spr_dt_hitbox
hurt.image_index  = variant-1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement. (Overwrite from parent)
 
 // Only run if in view.
    if(in_view())
    {
    
 // Horizontal:
    repeat(abs(x_speed))
    {
          if(place_meeting(x + sign(x_speed), y, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y - 1, par_terrain))
          {
             y -= 1;
          }
          if(place_meeting(x + sign(x_speed), y + 2, par_terrain) &amp;&amp; !place_meeting(x + sign(x_speed), y + 1, par_terrain))
          {
             y += 1;    
          }    
          if(!place_meeting(x+sign(x_speed), y, par_terrain) &amp;&amp; !place_meeting(x+sign(x_speed), y, obj_badnik_block))
          {
               x += x_speed;
          }
          else
          {
               if(turn_timer == -1)
               {
                  turn_timer  = 60;
               }
          }
    }
    
 // Timer to change direction.
    if(turn_timer != -1 &amp;&amp; turn_timer &gt; 0)
    {
       turn_timer -= 1;
    }
    else
    {
       if(turn_timer = 0)
       {
          if(sprite != spr_destruction_trio_turn)
          {
             sprite       = spr_destruction_trio_turn;
          }
          if(sprite == spr_destruction_trio_turn)
          {
             sprite_direction *= -1;          
             sprite            = spr_destruction_trio;
             turn_timer        = -1; 
             x_speed           = -x_speed;                 
          }    
       }
    }
    
// Vertical:
    repeat(abs(y_speed))
    {
           if not(place_meeting(x, y+sign(y_speed), par_solid)
           ||(y_speed &gt;= 0 &amp;&amp; place_meeting(x, y+sign(y_speed), par_platform) &amp;&amp; !place_meeting(x, y, par_platform)))
           {
              y += sign(y_speed);
           }
           else
           {
              y_speed = 0;
           }
    }
    if(ground == false)
    {
       y_speed += y_gravity;
       if(y_speed &gt; 12)
       {
          y_speed = 12;
       }
    }
 }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variant 1
 
    if variant=1
        {
            if ro=true
                {
                    r_time+=1
                    roll_angle=45*sin((r_time/15)-0.5*pi)+35
                    }
            
            if ro = false
                {
                    if roll_angle&gt;=-9{roll_angle=45*sin((r_time/15)-0.5*pi)+35;r_time+=1}
                    else{r_time=0;roll_angle=-10}
                    }
            
            if distance_to_object(par_character)&lt;128
                {
                    ro=true
                    }
                else
                    {
                        ro=false
                        }
                    }
        
 //Variant 2
 
     if variant=2
         {
            if bo=true
                {
                    b_time+=1
                    ball_angle=45*sin((b_time/15)-arcsin(1/3))+15
                    }
            
            if bo = false
                {
                    if sprite_direction=-1
                        {
                            if ball_angle&gt;=1{ball_angle=45*sin((b_time/15)-arcsin(1/3))+15;b_time+=1}
                            }
                        else if sprite_direction=1
                        {
                            if ball_angle&lt;=-1{ball_angle=45*sin((b_time/15)-arcsin(1/3))+15;b_time+=1}
                            }
                    else{b_time=0;ball_angle=0}
                    }
            
            if distance_to_object(par_character)&lt;128
                {
                    bo=true
                    }
                else
                    {
                        bo=false
                        }
                    }
                    
 //Variant 3
 
    if variant=3
        {
            if dr=true
                {
                    d_time+=1
                    drill_y=floor(12*sin((d_time/15)-arcsin(1/3)))
                    }
            
            if dr = false
                {
                    if drill_y!=0{drill_y=floor(12*sin((d_time/15)-arcsin(1/3)));d_time+=1}
                    else{d_time=0;drill_y=0}
                    }
            
            if distance_to_object(par_character)&lt;128
                {
                    dr=true
                    }
                else
                    {
                        dr=false
                        }
                    }
 
 //Hurt objects                   

  if variant = 1
    {
        hurt.x=floor(x)-24*sprite_direction+lengthdir_x(37*sprite_direction, roll_angle)
        hurt.y=floor(y)+3+lengthdir_y(37, roll_angle)
        hurt.image_xscale=sprite_direction
        }
        
     if variant = 2
        {
            hurt.x=floor(x)+29*sprite_direction
            hurt.image_xscale=sprite_direction
            hurt.image_angle=ball_angle*sprite_direction
            hurt.y=floor(y)-30
            }
            
        if variant = 3
            {
                hurt.x=floor(x)
                hurt.y=floor(y)+drill_y+4
                hurt.image_xscale=sprite_direction
                }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw badnik.

// BG graphic for Variant 1
    
if sprite=spr_destruction_trio
    {
        if variant == 1
            {
                draw_sprite_ext(spr_destruction_trio_1, 3, floor(x)-4*sprite_direction, floor(y)+3, sprite_direction, 1, roll_angle*sprite_direction, c_white, 1);
                }
            }
                
   // Body 
               
        draw_sprite_ext(sprite, variant-1, floor(x), floor(y), sprite_direction, 1, 0, c_white, 1);
        
// FG graphics for each variant

    if sprite=spr_destruction_trio
        {
            if variant == 1
                {
                    draw_sprite_ext(spr_destruction_trio_1, 0, floor(x), floor(y), sprite_direction, 1, 0, c_white, 1);
                    draw_sprite_ext(spr_destruction_trio_1, 2, floor(x)-24*sprite_direction+lengthdir_x(37*sprite_direction, roll_angle), floor(y)+3+lengthdir_y(37, roll_angle), sprite_direction, 1, 0, c_white, 1);
                    draw_sprite_ext(spr_destruction_trio_1, 1, floor(x)-24*sprite_direction, floor(y)+3, sprite_direction, 1, roll_angle*sprite_direction, c_white, 1);
                    }   
        
            if variant == 2
                {
                    draw_sprite_ext(spr_destruction_trio_2, 0, floor(x), floor(y), sprite_direction, 1, 0, c_white, 1);
                    draw_sprite_ext(spr_destruction_trio_2, 1, floor(x)+29*sprite_direction, floor(y)-30, sprite_direction, 1, ball_angle*sprite_direction, c_white, 1);
                    }   
        
            if variant == 3
                {
                    draw_sprite_ext(spr_destruction_trio_3, 0, floor(x), floor(y), sprite_direction, 1, 0, c_white, 1);
                    draw_sprite_ext(spr_destruction_trio_3, 1, floor(x), floor(y)+drill_y+4, sprite_direction, 1, 0, c_white, 1);
                    }
                }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
