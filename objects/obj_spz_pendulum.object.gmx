<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spz_pendulum</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0
image_index=2
triggered=false;
canbetriggered=true;
angle=1
xspeed=0
bg=instance_create(x,y,obj_bg_enemy)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if triggered=true{
par_character.animation_angle=image_angle}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if triggered==true
    {
        par_character.x=floor(x)+lengthdir_x(240-36, image_angle-85);
        par_character.y=floor(y)+lengthdir_y(240-36, image_angle-85);
        par_character.x_speed=0;
        par_character.y_speed=0;
        if par_character.state!=CS_HANG{
        par_character.state=CS_HANG}
        par_character.hang="ROLL"
        
        if image_xscale=1
            {
                if image_angle&lt;=angle*360
                    {
                        image_angle += (3*((image_angle/135)+1))
                        xspeed = power(1.002,image_angle)+15
                        }
                            else
                                {
                                    triggered             = false;
                                    canbetriggered        = false;
                                    par_character.state   = CS_ROLL;
                                    par_character.ground  = false;
                                    par_character.y_speed = lengthdir_x(xspeed,image_angle+90)
                                    par_character.x_speed = lengthdir_y(xspeed,image_angle-90)
                                    }
                                }
                                
        else if image_xscale=-1
            {
                if image_angle&gt;=-angle*360
                    {
                        image_angle -= (3/((image_angle/135)+1))
                        xspeed = clamp(power(1.002,image_angle)+15,-24,24)
                        }
                            else
                                {
                                    triggered             = false;
                                    canbetriggered        = false;
                                    par_character.state   = CS_ROLL;
                                    par_character.ground  = false;
                                    par_character.y_speed = lengthdir_x(xspeed,image_angle+90)
                                    par_character.x_speed = lengthdir_y(xspeed,image_angle-90)
                                    }
                                }
                            }
            else
                {
                    image_angle=lerp(image_angle,0,0.1)
                    }
        
        if canbetriggered == false 
            {
                if instance_exists(par_character)
                    {
                    if par_character.ground == true{
                    canbetriggered = true;
                }
            }
        }
        
        bg.x=x;bg.y=y;bg.sprite_index=spr_spz_pendulum;bg.image_index=3;
        bg.image_angle=image_angle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if image_xscale=1
    {
        if par_character.x_speed&gt;5
            {
                if other.is_cpu==false
                    {
                        if canbetriggered=true &amp;&amp; other.state!=CS_DEATH &amp;&amp; other.state!=CS_HURT
                            {
                                triggered=true;
                                }
                            }
                        }
                    }

if image_xscale=-1
    {
        if par_character.x_speed&lt;-5
            {
                if other.is_cpu==false
                    {
                        if canbetriggered=true &amp;&amp; other.state!=CS_DEATH &amp;&amp; other.state!=CS_HURT
                            {
                                triggered=true;
                                }
                            }
                        }
                    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_sprite(spr_spz_pendulum,0,x,y)
draw_sprite(spr_spz_pendulum,1,x,y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
