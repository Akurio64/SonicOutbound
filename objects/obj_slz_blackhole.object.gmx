<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slz_blackhole</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000010</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>triggered=false;
canbetriggered=true;
t=270
rx=0
ry=0
    
    surf = -1;
    surf_w = surface_get_width(application_surface);
    surf_h = surface_get_height(application_surface);
    tex_transform = shader_get_uniform( sh_blackhole, "tex_transform" );
    sampler = shader_get_sampler_index( sh_blackhole, "tex_back" );
    image_xscale = 2;
    image_yscale = 2;
    
//NOTE:  without texture repeating, when blackhole is near edge of view,
//       you will see streaks near the center
//       where it is trying to read positions outside of the texture edges
//       toggle on or off at your own discretion.
    texture_set_repeat(true);


//just for demo
    view_center_x = 0;
    view_center_y = 0;
    zoom = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if triggered==true
{
t+=5*par_character.animation_direction
par_character.state=CS_ROLL
rx= (x + (64) * cos(degtorad(t)))+8
ry= (y - (64) * sin(degtorad(t)))-8
par_character.x=rx
par_character.y=ry
if (par_character.input_action_pressed == true)
{
triggered=false;
canbetriggered=false;
par_character.x_speed=lengthdir_x(8,t)
par_character.y_speed=lengthdir_y(8,t)
audio_play(_char_spindash_release,global.sfx_volume)
}


}


if canbetriggered==false 
{
if instance_exists(par_character)
{
if place_meeting(x,y,par_character)==false{
canbetriggered=true;
}
}

}

if triggered=false{t=270}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.is_cpu==false{if canbetriggered=true &amp;&amp; other.state!=CS_DEATH &amp;&amp; other.state!=CS_HURT{triggered=true;}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if !surface_exists( surf ) { surf = surface_create( surf_w, surf_h ); }
    surface_copy( surf, 0, 0, application_surface );
    shader_set( sh_blackhole );
    shader_set_uniform_f( 
        tex_transform, 
        sprite_width  / (surf_w*zoom), 
        sprite_height / (surf_h*zoom), 
        ( x - sprite_width/2  - view_xview ) / view_wview, 
        ( y - sprite_height/2 - view_yview ) / view_hview 
    );
    texture_set_stage( sampler, surface_get_texture( surf ) );
    draw_self();
    shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
