<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hsz_surf</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize movement mechanics
hmspd=5; // maxium speed
vmspd=1.5; // maxium speed
hspd=0; // current direction player is moving (-1 left, 0 none, 1 right)
accl=.250; // the ammount per step to increment speed by until maximum is reached
hdir=0; // current horizontal direction player is moving
vspd=0; // current direction player is moving (-1 left, 0 none, 1 right)
vaccl=.05; // the ammount per step to increment speed by until maximum is reached
vdir=0; // current horizontal direction player is moving
fric=.1; // how fast to come to a hault
hspeed=image_xscale*4
hit = false
bouncespeed=3
image_speed=0.2
triggered=false;
canbetriggered=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>par_character.invincibility=0
image_angle=0
hit=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with instance_create(x-(48*image_xscale),y+(18*image_yscale),obj_surf_wave){
image_xscale=obj_sonic_surf.image_xscale
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x=clamp(x,instance_nearest(x,y,obj_surf_sea).x,instance_nearest(x,y,obj_surf_sea).x+instance_nearest(x,y,obj_surf_sea).sprite_width)
y=clamp(y,instance_nearest(x,y,obj_surf_sea).y,instance_nearest(x,y,obj_surf_sea).y+instance_nearest(x,y,obj_surf_sea).sprite_height-32)

x = xprevious
y = yprevious
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspeed=image_xscale*4

if (abs(hspd) &gt; 5){
if alarm[10]=-1{alarm[10]=10}
}
up=-keyboard_check(vk_up);
down=keyboard_check(vk_down);
vdir=(up+down); // get the key dir
if(vdir==0){  // if player is not pressing any buttons
  vspd=vspeed; // update hspd so it matches when player is moving
  friction=fric; // apply friction
}else{ // otherwise
  friction=0; // turn off friction
  vspd=median(-vmspd,vmspd, vspd+vdir*vaccl); // calculate the speed
  vspeed=vspd;}

if hspeed&gt;0{image_xscale=1}else if hspeed&lt;0{image_xscale=-1}

if hit=true{
    hmspd=2;
    vmspd=0.5;

}  
else{
    hmspd=5;
    vmspd=1.5
}

if(place_meeting(x+hspd, y+vspd,par_hurt_indestructible)){
   vspd = -sign(vspd)*bouncespeed;
   hspd = -sign(hspd)*bouncespeed;
}

if(place_meeting(x, y,par_hurt_indestructible)){
   
       if hit=false
        {
        par_character.invincibility=1
        hit=true
        alarm[11]=90
        audio_play(_char_lose_rings, global.sfx_volume);   
            
        rings_total = 4
        rings_angle = 101.25;
        rings_speed = 4;
        
        if global.crings&gt;4{
        global.crings-=4}
        else{state = CS_DEATH}
        
        while(rings_total)
        {
            ring = instance_create(x, y, obj_ring);
            ring.timer   = 720;        
            ring.y_speed = -dsin(round(rings_angle))*rings_speed;
            ring.x_speed =  dcos(round(rings_angle))*rings_speed;
            ring.motion  =  true;
            if(rings_total mod 2 != 0)
            {
                rings_angle  += 22.5;
                ring.x_speed *= -1;
            }   
            rings_total -= 1;
            if(rings_total == 16)
            {
                rings_speed = 2;
                rings_angle = 101.25;
            }
        }
    }
}

if y&lt;instance_nearest(x,y,obj_surf_rock).y{
    depth=1
}
else{
    depth=-1
}

par_character.x=floor(x)
par_character.y=floor(y);
par_character.x_speed=0;
par_character.y_speed=0;
par_character.input_lock_l=1
par_character.input_lock_r=1
par_character.depth=depth-1
if par_character.state!=CS_HANG{
par_character.state=CS_HANG
par_character.hang="SLIDE2"
par_character.surf=true
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
