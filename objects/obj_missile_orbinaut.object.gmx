<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_missile_orbinaut</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Circular Motion: */
parent   =     0;
position =     0;
degree   =     0;
spd      =    0.15;
radius   =    20;

fall =false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Circular Movement */
if ( instance_exists(parent) )
{
degree += spd/radius;
x = parent.x+radius*cos(degree)
y = parent.y+radius*sin(degree)
}

if fall=false
{
if place_meeting(x,y,obj_character)
{
with obj_character{
if(state != CS_HURT &amp;&amp; state != CS_DEATH &amp;&amp; invincibility == 0)
    {
       // Hurt the character:
          if(global.crings &gt; 0 || shield_index != 0)
          {
             // Switch state to hurt:
                state = CS_HURT;
                invincibility       =  1;
                invincibility_timer = -1;   
                
             // Rebound of object:
                if(physic_state == 0)
                {
                   y_speed = -4;
                }
                else
                {
                   y_speed = -2;
                }
                x_speed = 2*sign(x-obj_missile_orbinaut.x)
                ground  = false;
                
                   audio_play(_char_hurt, global.sfx_volume);  
          
                
             // Ring Drop:
               if(shield_index == 0)
               {
                  if hyper=false
                  {
                  character_ringtoss()
                  }
                  else if hyper=true
                  {
                  if global.crings&gt;20
                  {
                  character_hypertoss()
                  }
                  else
                  {
                  character_ringtoss()
                  }
                  }
               }
               else
               {
                  with(shield_object)
                  {
                       instance_destroy();
                  }
                  shield_object = noone;
                  shield_index  = 0;
               }            
          }
          else
          {
             state = CS_DEATH;
          }
    }

}
}
}
if fall=true
{
gravity=random_range(0.1,0.3)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
