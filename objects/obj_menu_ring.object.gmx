<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_ring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_menu_0</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir=0
choice=0
turn=-90
click=false
time=0
move=0
menu_text(0)
ar=0
col=c_orange
ct=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if click=false
{
if choice=0
{
if image_angle!=90+turn{
image_angle=lerp(image_angle,90+turn,0.15)
ct=lerp(ct,1,1/60)
alarm[0]=1;click=false
}else{click=true}}
if choice=1
{
if image_angle!=180+turn{
image_angle=lerp(image_angle,180+turn,0.15)
ct=lerp(ct,1,1/60)
alarm[0]=1;click=false
}else{click=true}}
if choice=2
{
if image_angle!=270+turn{
image_angle=lerp(image_angle,270+turn,0.15)
ct=lerp(ct,1,1/60)
alarm[0]=1;click=false
}else{click=true}}
if choice=3
{
if image_angle!=359+turn{
image_angle=lerp(image_angle,359+turn,0.15)
ct=lerp(ct,1,1/60)
alarm[0]=1;click=false
}else{click=true}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_menu_ring</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_left) || (joy_hat_x(0) = -1 &amp;&amp; GMP.dpad_left == 0))
{
dir=-1
if(audio_is_playing(_general_menu_bleep) == true)
             {
                audio_stop(_general_menu_bleep);
             }
             audio_play(_general_menu_bleep, global.sfx_volume);  
if choice=0
{
alarm[0]=1
choice=1
}
else if choice=1
{
alarm[0]=1
choice=2
}
else if choice=2
{
alarm[0]=1
choice=3
}
else if choice=3
{
alarm[0]=1
choice=0
turn+=360
}
}
else if(keyboard_check_pressed(vk_right) || (joy_hat_x(0) = 1 &amp;&amp; GMP.dpad_right == 0))
{
dir=1
if(audio_is_playing(_general_menu_bleep) == true)
             {
                audio_stop(_general_menu_bleep);
             }
             audio_play(_general_menu_bleep, global.sfx_volume);  
if choice=3
{
alarm[0]=1
choice=2
}
else if choice=2
{
alarm[0]=1
choice=1
}
else if choice=1
{
alarm[0]=1
choice=0
}
else if choice=0
{
alarm[0]=1
choice=3
turn-=360
}
}

if(keyboard_check_pressed(vk_left))
{ar=1}else if(keyboard_check_pressed(vk_right))
{ar=2}else{ar=0}

time+=50/3

x = (xstart + lengthdir_x(3, current_time*0.1))
y = (ystart + lengthdir_y(3, current_time*0.1))

// Menu Selection:
       if(keyboard_check_pressed(ord("A")) || (joy_pressed(0, global.dip_button_a || keyboard_check_pressed(vk_enter) || (joy_pressed(0, global.dip_button_s)))))
       {
          if choice=0
                {
                     if(instance_exists(obj_fade_to) == false)
                     {
                        with(instance_create(0, 0, obj_fade_to))
                        {
                             //fade_to = rm_data_select;
                             global.zone_id          = 0;
                               global.character_index  = 0;
                               global.cpu_index        = 1;
                               global.clives           = 3;
                               global.ccontinues       = 0;
                               global.cemeralds        = 0;
                               global.game_completed   = 0;
                             fade_to = rm_data_select;
                             
                        }
                     }
                     
                }
                if choice=1
                {
                     if(instance_exists(obj_fade_to) == false)
                     {
                        with(instance_create(0, 0, obj_fade_to))
                        {
                             fade_to = -1;
                        }
                     }
                     
                }       
                if choice=2
                {
                     with(instance_create(0, 0, obj_menu_transition))
                     {
                          transition_event = 2;
                     }
                     menu_selection_freeze = -1;  
                     if(audio_is_playing(_general_menu_woosh) == true)
                     {
                         audio_stop(_general_menu_woosh);
                     } 
                     audio_play(_general_menu_woosh, global.sfx_volume);                                                                                            
                     
                }   
                if choice=3
                {
                     with(instance_create(0, 0, obj_menu_transition))
                     {
                          transition_event = 1;
                     }
                       
                     if(audio_is_playing(_general_menu_woosh) == true)
                     {
                         audio_stop(_general_menu_woosh);
                     } 
                     audio_play(_general_menu_woosh, global.sfx_volume);                                                
                     
                }                                            
          }
    
if instance_exists(par_menu_1)=false{if(keyboard_check_pressed(ord("S")) || (joy_pressed(0, global.dip_button_b)))
       {
       with(instance_create(0, 0, obj_fade_to))
{
fade_to = rm_title_screen;
}
}
}

if choice=0{col=make_colour_rgb(224,128,0)}
else if choice=1{col=make_colour_rgb(90,160,30)}
else if choice=2{col=make_colour_rgb(40,30,120)}
else if choice=3{col=make_colour_rgb(50,70,95)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_circle_bg,0,x,y,1,1,2*sin(current_time*0.001),col,1)
draw_set_colour(c_black)
draw_set_alpha(0.5)
draw_circle(x,y,350,false)
draw_set_alpha(1)
draw_sprite(spr_m_ring_i,choice,x,y)
draw_self()
draw_set_colour(c_white)
draw_set_font(global.font_main)
draw_text_circle(x,y,string_repeat(menu_text(1)+"    ",clamp((2*324*pi)/string_width(menu_text(1)),1,2305)),324,0,-(time*0.0002*clamp(string_length(menu_text(1)),25,125)))
draw_set_halign(fa_left)
draw_set_valign(fa_left)
draw_set_colour(c_white)
draw_sprite_ext(spr_menu_arrow,ar,x,y-ystart-10,1,1,1.5*sin(current_time*0.001),c_white,1)
draw_sprite_ext(spr_menu_icon,choice,x-xstart+215,y-ystart+213,1,1,1*sin(current_time*0.001),c_black,0.5)
draw_sprite_ext(spr_menu_icon,choice,x-xstart+212,y-ystart+210,1,1,1*sin(current_time*0.001),c_white,1.0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
