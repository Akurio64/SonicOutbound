<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBackgroundLayers</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // Setup 3D    
    d3d_start();
    d3d_set_culling(false)
    d3d_set_lighting(false);
    d3d_set_shading(false)
    
    waterParallaxX = 0;
   audio_play(msc_title, global.bgm_volume);
    
    cloudTexY = 0;
    seaTexY = 0;
    seaTexX = 0;
    lpY = 0;
    lpYDir = 1;
    
    frameTimer = 0;
    
    sonicIndex = 0;
    wagFinger = true;
    
    bgColor = c_black;
        
    sonicFade = 0;
    bgFade = 255;
    bgRedFade = 255;
    
    bgR = 0;
    bgG = 0;
    bgB = 0;
    
    transition = 0;
    
    fadeOut = false;
    fadeOutRGB = 0;
    
    draw3D = true;
    drawBG = false;    
    drawTM = true;
    drawLP = true;
    animateWater = false;
    
    cloudTex = sprite_get_texture(sprCloudTexture, 0);
    seaTex = sprite_get_texture(sprSeaTexture, 0);
    
    audio_plays=false
    
    musicLengthInMS = 17200;
    
    fadeOutRoom = rm_menu;
    
    X = 0
    
    frame=0
vertex_format_begin();
vertex_format_add_position();
vertex_format_add_colour();
vertex_format_add_textcoord();
global.vf = vertex_format_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>X+=3

    //Perform action after fade out
    if(fadeOut &amp;&amp; fadeOutRGB &gt;= 255){
        room_goto(fadeOutRoom);
    }    
    // Move Little Planet
    lpY += 0.04*lpYDir;
    
    // Change Little Planets Y movement direction
    if(lpY &gt;= 4){
        lpY -= 0.1;
        lpYDir = -1;
    }else if(lpY &lt; 0){
        lpY += 0.1;
        lpYDir = 1;
    }
    
    // Move Water parallax layer position
    if(animateWater)
        waterParallaxX += 0.025;
    
    // Move Cloud Texture
    cloudTexY += 0.0002;
    if(cloudTexY &gt; 0.5)
        cloudTexY -= 0.1;
        
    
        
    seaTexX += 0.002;
    if(seaTexX &gt; 0.1)
        seaTexX -= 0.5;
                
    frameTimer += 1;
    
    // Animate water delayed.
    if(transition == 4 &amp;&amp; frameTimer &gt;= 8){
        drawLP = true;
        animateWater = true;
    }
    
    // Draw clouds delayed.
    if(transition == 2 &amp;&amp; frameTimer &gt;= 0)
        draw3D = true;
    
    // Display Sonic before transition, delayed.
    if(transition == 0 &amp;&amp; frameTimer &gt; 1){
    
        // Fade to white, to display the Sonic sprite, once sonic is completely visible, go to next transition.
        sonicFade = min(255, sonicFade+24);
        if(sonicFade == 255)
            transition = 1;
    }    
    
    // Animate Sonic's transition animation
    if(transition == 1 &amp;&amp; frameTimer &gt; 1){
        sonicIndex += 0.68;
        
        // Once his animation is done move to the next transition, and reset his frame index
        if(sonicIndex &gt;= sprite_get_number(sprSonicTransition)){
            sonicIndex = 0;
            transition = 2;
        }
    }
    
    // Fade to white, and fade blue slower to give a yellow tint
    if(transition == 2){
        bgR = min(255, bgR+64);
        bgG = min(255, bgG+64);
        bgB = min(255, bgB+32);
        
        if(bgR == 255 &amp;&amp; bgG == 255 &amp;&amp; bgB == 255){
            transition = 3;
            bgColor = make_color_rgb(0, 0, 107);
            drawBG = true;
        }
    }
    
    // Fade to black, and fade red slower to give a red tint
    if(transition == 3){
        bgR = max(0, bgR-16);
        bgG = max(0, bgG-64);
        bgB = max(0, bgB-64);
        
        if(bgR == 0 &amp;&amp; bgG == 0 &amp;&amp; bgB == 0){
            transition = 4;
            drawTM = true;
            frameTimer = 0;
        }
    }
    
    // Animate wagging finger
    if(draw3D == true &amp;&amp; drawBG == true){
        sonicIndex += 0.3
    }
    
    // Animate Fade out
    if(fadeOut == true)
        fadeOutRGB = min(255, fadeOutRGB+16);  
        
    if(frameTimer &gt;= musicLengthInMS/(1000/room_speed)){
        fadeOut = true;
        fadeOutRoom = rm_intro;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Clouds and Foreground</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

    // Draw Clouds
    if(draw3D){
    
        // Set projection back to 2D
        d3d_set_projection_ortho(0, 0, 424, 240, 0);
        
        // Set up 3D Perspectve
        d3d_set_projection_ext(0, 0, 0, 0, 0, 2000, 0, -1, 0, 45, 424/240, 1, 2000);       
        d3d_set_perspective(true);
        draw_set_color(c_white);
        d3d_set_hidden(false);
        // Draw 2 polygons to render a quad.
        d3d_primitive_begin_texture(pr_trianglelist, seaTex);
        
        d3d_vertex_texture(-1500, 149, 2048, seaTexX, seaTexY);
        d3d_vertex_texture(1500, 149, 2048, seaTexX+1, seaTexY);
        d3d_vertex_texture(1500, 149, 0, seaTexX+1, 0.5+seaTexY);
        
        d3d_vertex_texture(-1500, 149, 2048, seaTexX, seaTexY);
        d3d_vertex_texture(-1500, 149, 0, seaTexX, 0.5+seaTexY);
        d3d_vertex_texture(1500, 149, 0, seaTexX+1, 0.5+seaTexY);
        
        d3d_primitive_end();
        
        d3d_set_hidden(true);
        // Set projection back to 2D
        d3d_set_projection_ortho(0, 0, 424, 240, 0);
    }
    
    draw_sprite(sprBack,0, 0, 0);  
     draw_sprite(sprite_index, 1, x, floor(y-lpY));
    
    if(draw3D){
    
        // Set up 3D Perspectve
        d3d_set_projection_ext(0, 0, 0, 0, 0, 2000, 0, -1, 0, 45, 424/240, 1, 2000);       
        d3d_set_perspective(true);
        draw_set_color(c_white);
        d3d_set_hidden(false);
        // Draw 2 polygons to render a quad.
        d3d_primitive_begin_texture(pr_trianglelist, cloudTex);
        
        d3d_vertex_texture(-1000, -100, 0, 0, cloudTexY);
        d3d_vertex_texture(1000, -100, 0, 1, cloudTexY);
        d3d_vertex_texture(1000, -100, 1600, 1, 0.5+cloudTexY);
        
        d3d_vertex_texture(-1000, -100, 0, 0, cloudTexY);
        d3d_vertex_texture(-1000, -100, 1600, 0, 0.5+cloudTexY);
        d3d_vertex_texture(1000, -100, 1600, 1, 0.5+cloudTexY);
        
        d3d_primitive_end();
        
        d3d_set_hidden(true);
        // Set projection back to 2D
        d3d_set_projection_ortho(0, 0, 424, 240, 0);
        }
    
    draw_sprite_tiled(sprIslands,0,X,-71)
 draw_sprite(spr_ts_ring,0,230,84)
   draw_sprite(spr_ts_ring,1,230,84)     // Draw foreground elements.
    if(drawBG){
        
        // Draw Banner
        draw_sprite(sprite_index, 3, x, y);
        
        // Draw TM delayed
        if(drawTM)  
            draw_sprite(sprite_index, 4, x, y);
            
        // Draw blinking Press Start
        if(frameTimer mod 60 &lt; 30 &amp;&amp; draw3D == true)
            draw_sprite(sprite_index, 5, x, y);
    }
       
    // Draw Ring
    if(drawBG)
        draw_sprite(sprite_index, 2, x, y);
        
    // If Sonic isn't in his initial transition animation, draw normally, otherwise draw with colour of fade.
    if(transition &gt; 1){
        
        draw_sprite_bent(global.vf, spr_ts_sonic, 0, 230, 84, 230, 84+(sprite_height/2), 3*sin(0.001*current_time), 120, 1, 1, 0, c_white, 1);
        draw_sprite_ext(spr_ts_sonic_h, sonicIndex, 230-2*sin(0.001*current_time), 84, image_xscale, image_yscale, -20, c_white, 1)
        draw_sprite(sprite_index, 6, x, y);
        }
    else{
        draw_sprite_ext(sprSonicTransition, floor(sonicIndex), 0, 0, 1, 1, 0, make_color_rgb(sonicFade, sonicFade, sonicFade), 1)}
        

    
    // If the white fade is in effect, draw a white additive overlay.
    if(transition &gt;= 2){
        draw_set_blend_mode(bm_add);
        draw_set_color(make_color_rgb(bgR, bgG, bgB));
        draw_rectangle(0, 0, 424, 240, false);
        draw_set_blend_mode(bm_normal);
    }
    
    if(fadeOut){
        draw_set_blend_mode(bm_subtract);
        draw_set_color(make_color_rgb(fadeOutRGB, fadeOutRGB, fadeOutRGB));
        draw_rectangle(0, 0, 424, 240, false);
        draw_set_blend_mode(bm_normal);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Reset Room</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    fadeOut = true;
    fadeOutAction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
