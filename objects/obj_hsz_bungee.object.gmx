<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hsz_bungee</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>ctr_indestructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0
dis_y=0
y1=y
force=0
time_passed=0
used=false
reuse=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dis_y=y1-y

        if y1&gt;=y
        {
            if force&gt;0
            {
                time_passed+=1
                y1+=clamp(force,4,12)
                y1-=0.25*time_passed  
                used=true
                reuse=false
            }
        }
        
        if time_passed&gt;(clamp(force,4,12)*8)-1
        {
            used=false
            par_character.state=CS_ROLL;
            par_character.ground=false;
            par_character.y_speed=-force;
            par_character.image_yscale=1
            audio_play(_char_jump,global.sfx_volume)
        }
            
        if used=false
        {
            {
                force=0
                time_passed=0
                y1=y
            }
        }
        
        else if used==true &amp;&amp; reuse==false
        {
            par_character.x=floor(x)
            par_character.y=floor(y1+28);
            par_character.x_speed=0;
            par_character.y_speed=0;
            if par_character.state!=CS_HANG{
            par_character.state=CS_HANG}
            par_character.hang="BUNGEE"
        }
        
        if par_character.y&lt;y-32 or par_character.x&lt;x-8 or par_character.x&gt;x+8
        {
        reuse=true
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_character">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.is_cpu==false{
if used=false &amp;&amp; reuse=true &amp;&amp; other.state!=CS_DEATH &amp;&amp; other.state!=CS_HURT{
used=true;
var spd = point_distance(0, 0, obj_character.x_speed, obj_character.y_speed);
force=spd
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*1),0.5,0.5,0,c_white,1)
draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*2),0.5,0.5,0,c_white,1)
draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*3),0.5,0.5,0,c_white,1)
draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*4),0.5,0.5,0,c_white,1)
draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*5),0.5,0.5,0,c_white,1)
draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*6),0.5,0.5,0,c_white,1)
draw_sprite_ext(sprite_index,1,x,y+((dis_y/8)*7),0.5,0.5,0,c_white,1)

draw_sprite_ext(sprite_index,1,x,y1,1,1,0,c_white,1)
draw_sprite(sprite_index,0,x,y)

draw_text(0,0,y1-y)
draw_text(0,16,dis_y)
draw_text(0,32,force)
draw_text(0,48,time_passed)
draw_text(0,64,used)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
