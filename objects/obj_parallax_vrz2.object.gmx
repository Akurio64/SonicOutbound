<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99999999</depth>
  <persistent>0</persistent>
  <parentName>par_parallax</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cloudTex = sprite_get_texture(sprCloudTexture, 0);
cloudTexY = 0;
front_surface=noone; //We are going to create the card's texture from a surface.
back_surface=noone;  //So we define these here.

/// Create parallax.

 // First, call the parent. We do this to receive all variables from it.
    event_inherited()
    
 // Create the parallax background:
    var bg_yoffset;
        bg_yoffset = (room_height-(165+75-view_hview))/room_height; // Offset for the parallax bg.
        
 // Create the clouds:
    parallax_add_node(1, pbg_vrz_01, 1.00, -0.06, 0, 0, 0, bg_yoffset, 0, 0, 0, 0, 0, 0, 1, 292); // &lt; Parallax ID 0
    parallax_add_node(1, pbg_vrz_2_3, 0.98, 0, 0, 0, 0, bg_yoffset, 0, 0, 100, 0, 0, 0, 768, 150);  // &lt; Parallax ID 1      
    parallax_add_node(1, pbg_vrz_2_2, 0.96, 0, 0, 0, 0, bg_yoffset, 0, 0, 140, 0, 0, 0, 768, 150);  // &lt; Parallax ID 1      
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

///Create card surface we are going to use for textures.

//If the surfaces don't exist, create them!  Always do this!!!  Surfaces can disappear for like... no reason.
if(!surface_exists(front_surface))
{
  front_surface=surface_create(424,240);
  //Create the actual surface content.  Only happens once when the object is created to be more efficient, but if you wanted the card to animate, you could.
  surface_set_target(front_surface)
  {
    draw_clear_alpha(0,0);///Always clear a clear color to your new surface, as the memory that is being utilized will not have been initilized, and there could literally be anything in there.
  }
  surface_reset_target();
  
}
if(!surface_exists(back_surface))
{
  back_surface=surface_create(424,240);
  surface_set_target(back_surface)
  {
    draw_clear_alpha(0,0);
  }
  surface_reset_target();
}

///Done creating our surfaces.  Let's go draw and spin them.

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Move Cloud Texture
    cloudTexY += 0.0002;
    if(cloudTexY &gt; 0.5)
        cloudTexY =0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reflections.
        
 // Call parents draw event.
    event_inherited()

///Draw the card

if(surface_exists(front_surface) &amp;&amp; surface_exists(back_surface)) //Again, ALWAYS check for this!
{
  // Set up 3D Perspectve
        d3d_set_projection_ext(0, 0, 0, 0, 0, 2000, 0, -1, 0, 45, 424/240, 1, 2000);       
        d3d_set_perspective(true);
        draw_set_color(c_white);
        d3d_set_hidden(false);
        // Draw 2 polygons to render a quad.
        d3d_primitive_begin_texture(pr_trianglelist, cloudTex);
        
        d3d_vertex_texture(-1000, -100, 0, 0, cloudTexY);
        d3d_vertex_texture(1000, -100, 0, 1, cloudTexY);
        d3d_vertex_texture(1000, -100, 1600, 1, 0.5+cloudTexY);
        
        d3d_vertex_texture(-1000, -100, 0, 0, cloudTexY);
        d3d_vertex_texture(-1000, -100, 1600, 0, 0.5+cloudTexY);
        d3d_vertex_texture(1000, -100, 1600, 1, 0.5+cloudTexY);
        
        d3d_primitive_end();
        
        d3d_set_hidden(true);
        // Set projection back to 2D
        d3d_set_projection_ortho(view_xview, view_yview, 424, 240, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
